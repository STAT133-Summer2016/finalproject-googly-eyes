list(n = 10)
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
invoke_map(list(runif, rnorm), list(list(n = 11), list(n = 5)))
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
list(list(n = 10), list(n = 5))
runif(10)
runif(5)
rnorm(5)
rnorm(10)
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
## [[1]]
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
source('~/Dropbox/Stats133/group_project/finalproject-googly-eyes/douban_scipt.R', echo=TRUE)
source('~/Dropbox/Stats133/group_project/finalproject-googly-eyes/douban_scipt.R', echo=TRUE)
source('~/Dropbox/Stats133/group_project/finalproject-googly-eyes/douban_scipt.R', echo=TRUE)
shiny::runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
shiny::runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
runApp('Dropbox/Stats133/group_project/finalproject-googly-eyes/app')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
max(movies_by_director$mean_gross)
movies_by_director = read_csv("movies_by_director.csv")
max(movies_by_director$mean_gross)
max(movies_by_director$mean_gross, na.rm = T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
arrange(mean_gross, desc = T) %>%
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/fuck/finalproject-googly-eyes/cleaning_imdb.R', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/cleaning_imdb.R', echo=TRUE)
shiny::runApp()
source('~/fuck/finalproject-googly-eyes/Data_Cleaning_Script/combine_cols.R', echo=TRUE)
combined = left_join(common_data_rt, imdb_dat)
source('~/fuck/finalproject-googly-eyes/Data_Cleaning_Script/combine_cols.R', echo=TRUE)
nrow(combined)
View(combined)
source('~/fuck/finalproject-googly-eyes/Data_Cleaning_Script/combine_cols.R', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/Data_Cleaning_Script/combine_cols.R', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/Data_Cleaning_Script/combine_cols.R', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/Data_Cleaning_Script/combine_cols.R', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/Data_Cleaning_Script/combine_cols.R', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/Data_Cleaning_Script/combine_cols.R', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/Data_Cleaning_Script/combine_cols.R', echo=TRUE)
shiny::runApp()
col_names = c("Title",
"Time",
"Box",
"Tomato_meter",
"Audience_Reviews",
"Critics_rating",
"Audience_rating",
"Reviews_count",
"Fresh",
"Rotten",
"User_rating",
"Classification",
"Genres",
"Directed_by",
"Written_by",
"Cast",
"Length")
length(col_names)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
movies_df = movies_df %>%
mutate(Classification = str_replace_all("\\(.*\\)", "") %>% str_replace_all(" ", ""))
View(movies_df)
write_csv(movies_df, "movies_rt.csv")
movies_df = movies_df %>%
mutate(Classification = str_replace_all(Classification, "\\(.*\\)", "") %>% str_replace_all(" ", ""))
View(movies_df)
write_csv(movies_df, "movies_rt.csv")
source('~/.active-rstudio-document', echo=TRUE)
movies_df = movies_df %>%
mutate(Classification = str_replace_all(Classification, "\\(.*\\)", "") %>% str_replace_all(" ", "") %>% str_replace_all("NC17", "NC-17"))
View(movies_df)
write_csv(movies_df, "movies_rt.csv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rt_dat = read.csv("movies_rt.csv", stringsAsFactors = FALSE)
View(rt_dat)
shiny::runApp()
rt_dat
rt_dat$Time
rt_dat$Time %>% mdy()
rt_dat$Time %>% mdy() %>% year()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
imdb_dat
shiny::runApp()
shiny::runApp()
genre_dat
genre_dat = read.csv("genre_counting.csv")
genre_dat
shiny::runApp()
genre_dat
genre_dat %>%
filter(year == input$genre_year) %>%
group_by(year) %>%
mutate(portion = number / sum(number)) %>%
genre_dat %>%
filter(year == input$genre_year) %>%
group_by(year) %>%
mutate(portion = number / sum(number))
genre_dat %>%
filter(year == 2013) %>%
group_by(year) %>%
mutate(portion = number / sum(number))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
all_genres=c("Animation",
"Comedy",
"Documentary",
"Family",
"Horror",
"Musical",
"Romance",
"Sport",
"War",
"Adventure",
"Biography",
"Crime",
"Drama",
"Fantasy",
"History",
"Music",
"Mystery",
"Sci-Fi",
"Thriller",
"Western")
profit = data.frame(all_genres)
profit
dat = imdb_dat %>% filter(str_detect(genre, genres)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
dat = imdb_dat %>% filter(str_detect("Drama", genres)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
dat$budget
dat$gross
length(dat$budget)
length(dat$gross)
dat$budget / dat$gross
all_genres=c("Animation",
"Comedy",
"Documentary",
"Family",
"Horror",
"Musical",
"Romance",
"Sport",
"War",
"Adventure",
"Biography",
"Crime",
"Drama",
"Fantasy",
"History",
"Music",
"Mystery",
"Sci-Fi",
"Thriller",
"Western")
num = c()
profit_rate = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genre, genres)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rate = c(profit_rate, sum(dat$gross / dat$budget) / nrow(dat))
}
profit = data.frame(all_genres, profit_rate)
profit
dat = imdb_dat %>% filter(str_detect("Animation", genres)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
dat
imdb_dat %>% filter(str_detect("Animation", genres))
imdb_dat
imdb_dat$genres
imdb_dat$genres %>% str_detect("Animation")
imdb_dat$genres %>% str_detect("Animation") %>% sum()
imdb_dat$genres %>% str_detect("Animation") %>% sum(na.rm=T)
imdb_dat %>% filter(str_detect("Animation", genres))
wtf = imdb_dat %>% filter(str_detect("Animation", genres))
View(wtf)
all_genres=c("Animation",
"Comedy",
"Documentary",
"Family",
"Horror",
"Musical",
"Romance",
"Sport",
"War",
"Adventure",
"Biography",
"Crime",
"Drama",
"Fantasy",
"History",
"Music",
"Mystery",
"Sci-Fi",
"Thriller",
"Western")
num = c()
profit_rate = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rate = c(profit_rate, sum(dat$gross / dat$budget) / nrow(dat))
}
profit = data.frame(all_genres, profit_rate)
profit
all_genres=c("Animation",
"Comedy",
"Documentary",
"Family",
"Horror",
"Musical",
"Romance",
"Sport",
"War",
"Adventure",
"Biography",
"Crime",
"Drama",
"Fantasy",
"History",
"Music",
"Mystery",
"Sci-Fi",
"Thriller",
"Western")
num = c()
profit_rate = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10, profit_rates>0.1]
profit_rate = c(profit_rate, sum(dat$gross / dat$budget) / nrow(dat))
}
profit = data.frame(all_genres, profit_rate)
profit
})
all_genres=c("Animation",
"Comedy",
"Documentary",
"Family",
"Horror",
"Musical",
"Romance",
"Sport",
"War",
"Adventure",
"Biography",
"Crime",
"Drama",
"Fantasy",
"History",
"Music",
"Mystery",
"Sci-Fi",
"Thriller",
"Western")
num = c()
profit_rate = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10, profit_rates>0.1]
profit_rate = c(profit_rate, sum(dat$gross / dat$budget) / nrow(dat))
}
profit = data.frame(all_genres, profit_rate)
profit
all_genres=c("Animation",
"Comedy",
"Documentary",
"Family",
"Horror",
"Musical",
"Romance",
"Sport",
"War",
"Adventure",
"Biography",
"Crime",
"Drama",
"Fantasy",
"History",
"Music",
"Mystery",
"Sci-Fi",
"Thriller",
"Western")
num = c()
profit_rate = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10, profit_rates>0.1]
profit_rate = c(profit_rate, sum(profit_rates) / length(profit_rates))
}
profit = data.frame(all_genres, profit_rate)
profit
num = c()
profit_rate = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10 & profit_rates>0.1]
profit_rate = c(profit_rate, sum(profit_rates) / length(profit_rates))
}
profit = data.frame(all_genres, profit_rate)
profit
num = c()
profit_rate = c()
profit_rate_sd = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10 & profit_rates>0.1]
profit_rate = c(profit_rate, sum(profit_rates) / length(profit_rates))
profit_rate_sd = c(profit_rate_sd, sd(profit_rates))
}
profit = data.frame(all_genres, profit_rate)
profit
num = c()
profit_rate = c()
profit_rate_sd = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10 & profit_rates>0.1]
profit_rate = c(profit_rate, sum(profit_rates) / length(profit_rates))
profit_rate_sd = c(profit_rate_sd, sd(profit_rates))
}
profit = data.frame(all_genres, profit_rate, profit_rate_sd)
profit
v1=c(1,2)
v2=c(3,4,5)
g = c("A", "B")
data.frame("A", v1)
profit = data.frame()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10 & profit_rates>0.1]
#       profit_rate = c(profit_rate, sum(profit_rates) / length(profit_rates))
#       profit_rate_sd = c(profit_rate_sd, sd(profit_rates))
profit = bind_rows(profit, data.frame(genre, profit_rates))
}
# profit = data.frame(all_genres, profit_rate, profit_rate_sd)
profit
shiny::runApp()
shiny::runApp()
profit = data.frame()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10 & profit_rates>0.1]
#       profit_rate = c(profit_rate, sum(profit_rates) / length(profit_rates))
#       profit_rate_sd = c(profit_rate_sd, sd(profit_rates))
profit = bind_rows(profit, data.frame(genre, dummy = genre, profit_rates))
}
# profit = data.frame(all_genres, profit_rate, profit_rate_sd)
profit
shiny::runApp()
profit
profit %>% group_by(genre) %>% mutate(m=mean(profit_rates))
shiny::runApp()
profit %>% group_by(genre) %>% mutate(m=mean(profit_rates)) %>% arrange(m)
p = profit %>% group_by(genre) %>% mutate(m=mean(profit_rates))
p$profit_rates %>% max()
p = profit %>%
filter(profit_rates<5 & profit_rates>0.2) %>%
group_by(genre) %>%
mutate(mean_profit = mean(profit_rates))
p
max(p$mean_profit)
min(p$mean_profit)
p = profit %>% group_by(genre) %>% summarise(m=mean(profit_rates))
p
profit$genre
shiny::runApp()
shiny::runApp()
all_genres=c("Animation",
"Comedy",
"Documentary",
"Family",
"Horror",
"Musical",
"Romance",
"Sport",
"War",
"Adventure",
"Biography",
"Crime",
"Drama",
"Fantasy",
"History",
"Music",
"Mystery",
"Sci-Fi",
"Thriller",
"Western")
length(all_genres)
profit_rate = c()
profit_rate_sd = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10 & profit_rates>0.1]
profit_rate = c(profit_rate, sum(profit_rates) / length(profit_rates))
profit_rate_sd = c(profit_rate_sd, sd(profit_rates))
# profit = bind_rows(profit, data.frame(genre, profit_rates))
}
profit = data.frame(all_genres, profit_rate, profit_rate_sd)
profit
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
imdb_box_day = read_csv("movies_imdb.csv") %>%
source('~/fuck/finalproject-googly-eyes/Data Cleaning Script/dataCleaning.R', echo=TRUE)
shiny::runApp()
shiny::runApp()
imdb_dat
lm(imdb_dat$metaScore ~ imdb_dat$gross)
imdb_dat %>% filter(budget > 25000000) %>% lm(imdb_dat$metaScore ~ imdb$gross)
lr = lm(imdb_dat$metaScore ~ imdb_dat$gross)
lr[1]
lr[1][1]
lr$coefficients$[1]
lr$coefficients$gross
lr$coefficients[1]
shiny::runApp()
lr
summary(lr)
shiny::runApp()
lr = lm(imdb_dat$gross ~ imdb_dat$metaScore)
summary(lr)
dat = imdb_dat %>% filter(budget > 25000000)
lr = lm(dat$gross, dat$metaScore)
lr = lm(dat$gross~dat$metaScore)
summary(lr)
dat = imdb_dat %>% filter(budget < 25000000)
lr = lm(dat$gross~dat$metaScore)
summary(lr)
shiny::runApp()
imdb_dat$gross %>% summary()
quantile(imdb_dat$gross, c(0.05, 0.9999), na.rm = T)
shiny::runApp()
shiny::runApp()
imdb_dat$budget %>% summary()
imdb_dat$budget %>% quantile(c(0.05, 0.9999), na.rm=T)
shiny::runApp()
imdb_dat %>%
imdb_dat$general_rating_user %>% quantile(99.99)
imdb_dat$general_rating_user %>% quantile(99.99, na.rm=T)
imdb_dat$general_rating_user %>% quantile(0.9999, na.rm=T)
imdb_dat$general_rating_user %>% quantile(c(0.01, 0.9999), na.rm=T)
shiny::runApp()
imdb_dat %>% quantile(0.0001, 0.99999)
imdb_dat$gross %>% quantile(c(0.0001, 0.9999), na.rm=T)
lb = imdb_dat %>% filter(budget < 25000000)
lb$gross %>% quantile(c(0.0001, 0.9999), na.rm=T)
lb$general_rating_user %>% quantile(c(0.0001, 0.9999), na.rm=T)
imdb_dat %>% filter(budget > 25000000)
hb = imdb_dat %>% filter(budget > 25000000)
hb$gross %>% quantile(c(0.0001, 0.9999), na.rm = T)
hb$general_rating_user %>% quantile(c(0.0001, 0.9999), na.rm = T)
shiny::runApp()
hb$gross %>% quantile(c(0.0001, 0.997), na.rm = T)
hb$gross %>% quantile(c(0.003, 0.997), na.rm = T)
hb$general_rating_user %>% quantile(c(0.003, 0.997), na.rm = T)
lb$general_rating_user %>% quantile(c(0.003, 0.997), na.rm = T)
lb$gross %>% quantile(c(0.003, 0.997), na.rm = T)
shiny::runApp()
