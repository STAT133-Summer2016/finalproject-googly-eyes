"eRomance",
"kSport",
"sWar",
"nAdventure",
"cBiography",
"pCrime",
"hDrama",
"mFantasy",
"rHistory",
"bMusic",
"lMystery",
"qSci-Fi",
"oThriller",
"tWestern")
all_genres = c("Animation",
"Comedy",
"Documentary",
"Family",
"Horror",
"Musical",
"Romance",
"Sport",
"War",
"Adventure",
"Biography",
"Crime",
"Drama",
"Fantasy",
"History",
"Music",
"Mystery",
"Sci-Fi",
"Thriller",
"Western")
num = c()
profit_rate = c()
profit_rate_sd = c()
for(genre in all_genres){
dat = imdb_dat %>% filter(str_detect(genres, genre)) %>% filter(!is.na(budget)) %>% filter(!is.na(gross))
profit_rates = dat$gross / dat$budget
profit_rates = profit_rates[profit_rates<10 & profit_rates>0.1]
profit_rate = c(profit_rate, sum(profit_rates) / length(profit_rates))
profit_rate_sd = c(profit_rate_sd, sd(profit_rates))
}
profit = data.frame(all_genres, profit_rate, profit_rate_sd, order)
View(profit)
shiny::runApp('~/fuck/finalproject-googly-eyes/movies')
shiny::runApp('~/fuck/finalproject-googly-eyes/movies')
imdb_dat$keywords %>% str_split(",")
imdb_dat$keywords %>% str_split(",") %>% unlist()
words = imdb_dat$keywords %>% str_split(",") %>% unlist()
sort(table(words),decreasing=TRUE)[1:10]
sort(table(words),decreasing=TRUE)[1:20]
words %>% data.frame()
sort(table(words),decreasing=TRUE)[1:10]  %>%  data.frame()
shiny::runApp('~/fuck/finalproject-googly-eyes/movies')
sort(table(words),decreasing=TRUE)[1:10]  %>%  data.frame() %>% ggplot() +geom_bar(aes(words, Freq))
sort(table(words),decreasing=TRUE)[1:10]  %>%  data.frame() %>% ggplot() +geom_bar(aes(x=words, y=Freq))
sort(table(words),decreasing=TRUE)[1:10]  %>%  data.frame()
a = sort(table(words),decreasing=TRUE)[1:10]  %>%  data.frame()a
a = sort(table(words),decreasing=TRUE)[1:10]  %>%  data.frame()
colnames(a) = c("words", "freq")
a %>% ggplot() +geom_bar(aes(x=words, y=freq))
a
a %>% ggplot() +geom_histogram(aes(x=words, y=freq))
colnames(a )=c("1", "2")
colnames(a )=c("a", "b")
a %>% ggplot() +geom_histogram(aes(x=a, y=b))
a %>% ggplot() +geom_bar(aes(x=a, y=b))
a$b
typeof(a$b)
a %>% ggplot() +geom_histogram(aes(a))
sort(table(words),decreasing=TRUE)[1:10]   %>% ggplot(aes(words)) + geom_bar()
sort(table(words),decreasing=TRUE)[1:10]   %>% .[1]
sort(table(words),decreasing=TRUE)[1:10]   %>% .[[1]]
sort(table(words),decreasing=TRUE)[1:10]   %>% as.vector()
sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]]
sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
words = imdb_dat %>% .$keywords %>% str_split(",") %>% unlist()
top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
words = words[words %in% top_words] %>% data.frame()
ggplot(words) + geom_bar(aes(words), color = "blue")
words = imdb_dat %>% .$keywords %>% str_split(",") %>% unlist()
top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
words = words[words %in% top_words]
ggplot(words) + geom_bar(aes(words), color = "blue")
words = imdb_dat %>% .$keywords %>% str_split(",") %>% unlist()
top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
words = words[words %in% top_words]
ggplot(words) + geom_bar(aes(words, y = ..density..), color = "blue")
words = imdb_dat %>% .$keywords %>% str_split(",") %>% unlist()
top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
words = words[words %in% top_words] %>% data.frame()
ggplot(words) + geom_bar(aes(words, y = ..density..), color = "blue")
words = imdb_dat %>% .$keywords %>% str_split(",") %>% unlist()
top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
words = words[words %in% top_words] %>% data.frame()
ggplot(words) + geom_histogram(aes(words), color = "blue")
> words = imdb_dat %>% .$keywords %>% str_split(",") %>% unlist()
> top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
> words = words[words %in% top_words]
words = imdb_dat %>% .$keywords %>% str_split(",") %>% unlist()
top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
words = words[words %in% top_words]
words
words = words %>% data.frame()
words
ggplot(data = words, aes(words[[1]]))+geom_bar()
words
top_words
shiny::runApp('~/fuck/finalproject-googly-eyes/movies')
ggplot(data = words, aes(words[[1]]))+geom_bar()+scale_x_discrete(breaks=top_words)
ggplot(data = words, aes(words[[1]]))+geom_bar()
words = movie_by_genre_imdb() %>% .$keywords %>% str_split(",") %>% unlist()
top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
words = words[words %in% top_words] %>% data.frame()
words =imdb_dat %>% .$keywords %>% str_split(",") %>% unlist()
top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame() %>% .[[1]] %>% as.vector()
words = words[words %in% top_words] %>% data.frame()
words= words %>% mutate(one = 1) %>% group_by(word) %>% mutate(freq = sum(one))
colnames(words)
ncol(words)
colnames(words) = "word"
words= words %>% mutate(one = 1) %>% group_by(word) %>% mutate(freq = sum(one))
words
words= words %>% mutate(one = 1) %>% group_by(word) %>% summarise(freq = sum(one))
word()
word
words
words = imdb_dat %>% .$keywords %>% str_split(",") %>% unlist()
top_words = sort(table(words),decreasing=TRUE)[1:10]
top_words
top_words = sort(table(words),decreasing=TRUE)[1:10]   %>% data.frame()
top_words
top_words$words <- factor(top_words$words, levels = top_words$words[order(top_words$Freq)])
ggplot(top_words, aes(x = words, y = Freq)) + theme_bw() + geom_bar(stat = "identity")
shiny::runApp('~/fuck/finalproject-googly-eyes/movies')
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 3))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i])) %>%
filter(!is.na(gross)) %>%
filter(!is.na(budget))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T),
num = length(temp)))
}
actors_and_movies %>%
mutate(gross = gross / num) %>%
mutate(budget = gross / num) %>%
arrange(desc(gross)) %>%
head(300) %>%
ggplot() +
geom_point(aes(x=budget, y=gross))
write_csv(actors_and_movies, "../movies/Data/actors_and_movies.csv")
setwd("~/fuck/finalproject-googly-eyes/Data Cleaning Script")
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 3))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i])) %>%
filter(!is.na(gross)) %>%
filter(!is.na(budget))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T),
num = length(temp)))
}
actors_and_movies %>%
mutate(gross = gross / num) %>%
mutate(budget = gross / num) %>%
arrange(desc(gross)) %>%
head(300) %>%
ggplot() +
geom_point(aes(x=budget, y=gross))
write_csv(actors_and_movies, "../movies/Data/actors_and_movies.csv")
# Convert gross and budget currency to USD
cad_us_rate = read_csv("../Data/exchange rate/rates_data_cad.csv")
colnames(cad_us_rate) = c("date", "rate", as.character(1:9))
cad_us_rate = cad_us_rate %>%
mutate(date = ymd(date)) %>%
select(date, rate)
aud_us_rate = read_csv("../Data/exchange rate/rates_data_aud.csv")
colnames(aud_us_rate) = c("date", "rate", as.character(1:9))
aud_us_rate = aud_us_rate %>%
mutate(date = ymd(date)) %>%
select(date, rate)
CurrencyExchange = function(date, money, currency){
if (currency == "CAD"){
money = str_match(money, "[0-9]+") %>% as.numeric()
for (i in 1:nrow(cad_us_rate)){
if (cad_us_rate[i,1] < date){
return(money / cad_us_rate[i,2])
}
}
NA
}
if (currency == "AUD"){
money = str_match(money, "[0-9]+") %>% as.numeric()
for (i in 1:nrow(aud_us_rate)){
if (aud_us_rate[i,1] < date){
return(money / aud_us_rate[i,2])
}
}
NA
}
if (currency == "DKK"){
return(str_match(money, "[0-9]+") %>% as.numeric() / 6.99181)
}
NA
}
# Row bind data of each year to a large data set
years = 2000:2015
movies_imdb = data.frame()
for (year in years){
df = read_csv(str_c("../Data/imdb/movies_imdb_", year, ".csv", sep = ""))
movies_imdb = rbind(movies_imdb, df)
}
# Clean the movie data from imdb
movies_imdb$contentRating[7600] = str_c("Rated", movies_imdb$contentRating[7600], sep=" ")
movies_imdb = movies_imdb %>%
mutate(general_rating_val = str_match(ratingValue, "[0-9]\\.[0-9]")) %>%
mutate(general_rating_val = as.numeric(general_rating_val)) %>%
mutate(general_rating_user = str_match(ratingValue, "based on .* user ratings") %>%
str_replace("based on ", "") %>%
str_replace(" user ratings", "") %>%
str_replace(",", "") %>%
as.numeric()) %>%
mutate(review_users = str_replace(review_users, "user", "") %>%
str_replace(",", "") %>% str_replace(" ", "") %>% as.numeric()) %>%
mutate(review_critcs = str_replace(review_critcs, "critic", "") %>%
str_replace(",", "") %>% str_replace(" ", "") %>% as.numeric()) %>%
mutate(contentRatingLevel = str_replace(contentRating, "(rated )|(Rated )", "")) %>%
mutate(contentRatingLevel = str_replace(contentRatingLevel, "( for.*)|( on.*)|( For.*)|(thematic.*)|( material.*)", "")) %>%
mutate(contentRatingLevel = str_replace_all(contentRatingLevel, " ", "")) %>%
filter(str_detect(country, "USA")) %>%
filter(date > mdy("01-01-2000")) %>%
filter(date < mdy("01-01-2016")) %>%
mutate(gross = as.numeric(gross)) %>%
mutate(name = str_replace_all(name, "\\([0-9]{4}\\)", "")) %>%
mutate(year = year(date))
colnames(movies_imdb)[which(names(movies_imdb) == "general_rating_val")] <- "rating"
movies_imdb = movies_imdb %>%
mutate(budget = ifelse(str_detect(budget, "CAD"), CurrencyExchange(date, budget, "CAD"), as.numeric(budget))) %>%
mutate(budget = ifelse(str_detect(budget, "AUD"), CurrencyExchange(date, budget, "AUD"), as.numeric(budget))) %>%
mutate(budget = ifelse(str_detect(budget, "DKK"), CurrencyExchange(date, budget, "DKK"), as.numeric(budget)))
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 3))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i])) %>%
filter(!is.na(gross)) %>%
filter(!is.na(budget))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T),
num = length(temp)))
}
actors_and_movies %>%
mutate(gross = gross / num) %>%
mutate(budget = gross / num) %>%
arrange(desc(gross)) %>%
head(300) %>%
ggplot() +
geom_point(aes(x=budget, y=gross))
write_csv(actors_and_movies, "../movies/Data/actors_and_movies.csv")
shiny::runApp('~/fuck/finalproject-googly-eyes/movies')
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 4))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i])) %>%
filter(!is.na(gross)) %>%
filter(!is.na(budget))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T),
num = length(temp)))
}
actors_and_movies %>%
mutate(gross = gross / num) %>%
mutate(budget = gross / num) %>%
arrange(desc(gross)) %>%
head(300) %>%
ggplot() +
geom_point(aes(x=budget, y=gross))
write_csv(actors_and_movies, "../movies/Data/actors_and_movies.csv")
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 4))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i])) %>%
filter(!is.na(gross)) %>%
filter(!is.na(budget))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T),
num = nrow(temp)))
}
actors_and_movies %>%
mutate(gross = gross / num) %>%
mutate(budget = gross / num) %>%
arrange(desc(gross)) %>%
head(300) %>%
ggplot() +
geom_point(aes(x=budget, y=gross))
write_csv(actors_and_movies, "../movies/Data/actors_and_movies.csv")
shiny::runApp('~/fuck/finalproject-googly-eyes/movies')
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 4))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i])) %>%
filter(!is.na(gross)) %>%
filter(!is.na(budget))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T),
num = nrow(temp)))
}
actors_and_movies %>%
mutate(gross = gross / num) %>%
mutate(budget = gross / num) %>%
arrange(desc(gross)) %>%
head(300) %>%
ggplot() +
geom_point(aes(x=budget, y=gross))
write_csv(actors_and_movies, "../movies/Data/actors_and_movies.csv")
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
# Convert gross and budget currency to USD
cad_us_rate = read_csv("../Data/exchange rate/rates_data_cad.csv")
colnames(cad_us_rate) = c("date", "rate", as.character(1:9))
cad_us_rate = cad_us_rate %>%
mutate(date = ymd(date)) %>%
select(date, rate)
aud_us_rate = read_csv("../Data/exchange rate/rates_data_aud.csv")
colnames(aud_us_rate) = c("date", "rate", as.character(1:9))
aud_us_rate = aud_us_rate %>%
mutate(date = ymd(date)) %>%
select(date, rate)
CurrencyExchange = function(date, money, currency){
if (currency == "CAD"){
money = str_match(money, "[0-9]+") %>% as.numeric()
for (i in 1:nrow(cad_us_rate)){
if (cad_us_rate[i,1] < date){
return(money / cad_us_rate[i,2])
}
}
NA
}
if (currency == "AUD"){
money = str_match(money, "[0-9]+") %>% as.numeric()
for (i in 1:nrow(aud_us_rate)){
if (aud_us_rate[i,1] < date){
return(money / aud_us_rate[i,2])
}
}
NA
}
if (currency == "DKK"){
return(str_match(money, "[0-9]+") %>% as.numeric() / 6.99181)
}
NA
}
# Row bind data of each year to a large data set
years = 2000:2015
movies_imdb = data.frame()
for (year in years){
df = read_csv(str_c("../Data/imdb/movies_imdb_", year, ".csv", sep = ""))
movies_imdb = rbind(movies_imdb, df)
}
# Clean the movie data from imdb
movies_imdb$contentRating[7600] = str_c("Rated", movies_imdb$contentRating[7600], sep=" ")
movies_imdb = movies_imdb %>%
mutate(general_rating_val = str_match(ratingValue, "[0-9]\\.[0-9]")) %>%
mutate(general_rating_val = as.numeric(general_rating_val)) %>%
mutate(general_rating_user = str_match(ratingValue, "based on .* user ratings") %>%
str_replace("based on ", "") %>%
str_replace(" user ratings", "") %>%
str_replace(",", "") %>%
as.numeric()) %>%
mutate(review_users = str_replace(review_users, "user", "") %>%
str_replace(",", "") %>% str_replace(" ", "") %>% as.numeric()) %>%
mutate(review_critcs = str_replace(review_critcs, "critic", "") %>%
str_replace(",", "") %>% str_replace(" ", "") %>% as.numeric()) %>%
mutate(contentRatingLevel = str_replace(contentRating, "(rated )|(Rated )", "")) %>%
mutate(contentRatingLevel = str_replace(contentRatingLevel, "( for.*)|( on.*)|( For.*)|(thematic.*)|( material.*)", "")) %>%
mutate(contentRatingLevel = str_replace_all(contentRatingLevel, " ", "")) %>%
filter(str_detect(country, "USA")) %>%
filter(date > mdy("01-01-2000")) %>%
filter(date < mdy("01-01-2016")) %>%
mutate(gross = as.numeric(gross)) %>%
mutate(name = str_replace_all(name, "\\([0-9]{4}\\)", "")) %>%
mutate(year = year(date))
colnames(movies_imdb)[which(names(movies_imdb) == "general_rating_val")] <- "rating"
movies_imdb = movies_imdb %>%
mutate(budget = ifelse(str_detect(budget, "CAD"), CurrencyExchange(date, budget, "CAD"), as.numeric(budget))) %>%
mutate(budget = ifelse(str_detect(budget, "AUD"), CurrencyExchange(date, budget, "AUD"), as.numeric(budget))) %>%
mutate(budget = ifelse(str_detect(budget, "DKK"), CurrencyExchange(date, budget, "DKK"), as.numeric(budget)))
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 4))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i])) %>%
filter(!is.na(gross)) %>%
filter(!is.na(budget))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T),
num = nrow(temp)))
}
actors_and_movies %>%
mutate(gross = gross / num) %>%
mutate(budget = gross / num) %>%
arrange(desc(gross)) %>%
head(300) %>%
ggplot() +
geom_point(aes(x=budget, y=gross))
write_csv(actors_and_movies, "../movies/Data/actors_and_movies.csv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(imdb_dat)
shiny::runApp()
shiny::runApp()
shiny::runApp()
