where
nyflights.dest LIKE 'DFW'
")) %>%
collect
help(package = "nycflights13")
flights <- src_sqlite("nycflights13.mysqlite3")
setwd("~/Dropbox/Stats133/stats133/hw8")
flights <- src_sqlite("nycflights13.mysqlite3")
q1 <- flights %>% tbl(sql("
select distinct
nyairlines.name
from
nyairlines LEFT JOIN nyflights
ON nyairlines.carrier = nyflights.carrier
where
nyflights.dest LIKE 'DFW'
")) %>%
collect
Airlines =  flights %>% tbl(sql("
select distinct
nyairlines.name
from
nyairlines LEFT JOIN nyflights
ON nyairlines.carrier = nyflights.carrier
where
nyflights.dest LIKE 'DFW'
")) %>%
collect
Airlines
tbl = flights %>% tbl(sql("
select distinct
nyflights.tailnum,
nyplanes.year,
nyplanes.model,
nyplanes.engines,
nyplanes.seats
from
nyplanes,
nyflights
where
nyflights.carrier = 'UA' AND nyflights.tailnum = nyplanes.tailnum
order by
nyplanes.year ASC
")) %>%
collect
tbl = flights %>% tbl(sql("
select distinct
nyflights.tailnum,
nyplanes.year,
nyplanes.model,
nyplanes.engines,
nyplanes.seats
from
nyplanes,
nyflights
where
nyflights.carrier = 'UA' AND nyflights.tailnum = nyplanes.tailnum
order by
nyplanes.year ASC
")) %>%
collect
tbl
tbl = flights %>% tbl(sql("
select distinct
nyflights.tailnum,
nyplanes.year,
nyplanes.model,
nyplanes.engines,
nyplanes.seats
from
nyplanes,
nyflights
where
nyflights.carrier = 'UA' AND nyflights.tailnum = nyplanes.tailnum
order by
nyplanes.year ASC
")) %>%
collect
tbl
tbl = flights %>% tbl(sql("
select distinct
nyflights.tailnum,
nyplanes.year,
nyplanes.model,
nyplanes.engines,
nyplanes.seats
from
nyplanes,
nyflights
where
nyflights.carrier = 'UA' AND nyflights.tailnum = nyplanes.tailnum
order by
nyplanes.year DESC
")) %>%
collect
tbl
tbl2 = flights %>% tbl(sql("
select
nyairports.name as Airport,
count(nyairports.name) as NumberOfFlights
from
nyairports LEFT JOIN nyflights
ON nyairports.faa = nyflights.dest
where
nyflights.year = 2013
group by
nyairports.name
order by
count(nyairports.name) DESC
")) %>%
collect
tbl2
tbl3 <- flights %>% tbl(sql("
select
nyweather.wind_speed,
nyflights.hour,
nyflights.time_hour
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
View(flights)
tbl3 <- flights %>% tbl(sql("
select
flight,
year,
month,
day,
nyweather.wind_speed,
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
tbl3 <- flights %>% tbl(sql("
select
flight,
year,
month,
day,
nyweather.wind_speed,
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
tbl3 <- flights %>% tbl(sql("
select
flight,
year,
month,
day,
nyweather.wind_speed
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
tbl3 <- flights %>% tbl(sql("
select
flight,
month,
day,
nyweather.wind_speed
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
tbl3 <- flights %>% tbl(sql("
select
flight,
nyweather.wind_speed
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
help(package = "nycflights13")
tbl3 <- flights %>% tbl(sql("
select
flight,
sched_dep_time,
nyweather.wind_speed
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
tbl3 <- flights %>% tbl(sql("
select
flight,
sched_dep_time,
nyweather.wind_speed
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
tbl3 <- flights %>% tbl(sql("
select
flight,
sched_dep_time,
dep_time,
nyweather.wind_speed
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
tbl3 <- flights %>% tbl(sql("
select
flight,
sched_dep_time,
dep_time,
nyweather.wind_speed
from
nyflights,
nyweather
where
nyflights.dep_delay > 30 AND nyflights.origin = nyweather.origin AND nyflights.time_hour = nyweather.time_hour
")) %>%
collect
tbl3
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
library(dplyr)
library(ggplot2)
library(purrr)
library(stringr)
library(nycflights13)
library(RSQLite)
library(animation)
library(tidyr)
runApp('~/Dropbox/Stats133/group/finalproject-googly-eyes/movies')
runApp('~/Dropbox/Stats133/group/finalproject-googly-eyes/movies')
runApp('~/Dropbox/Stats133/group/finalproject-googly-eyes/movies')
runApp('~/Dropbox/Stats133/group/finalproject-googly-eyes/movies')
movies_imdb = read_csv("movies_imdb.csv")
setwd("~/Dropbox/Stats133/group/finalproject-googly-eyes")
movies_imdb = read_csv("movies_imdb.csv")
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 3))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i]))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T)))
}
actors_and_movies %>%
arrange(desc(gross)) %>%
head(300) %>%
ggplot() +
geom_point(aes(x=budget, y=gross))
write_csv(actors_and_movies, "./movies/actors_and_movies.csv")
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 3))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i]))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T)))
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 3))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i]))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T)))
}
setwd("~/Dropbox/Stats133/group/finalproject-googly-eyes")
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 3))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i]))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T)))
}
library(readr)
library(stringr)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
movies_imdb = read_csv("movies_imdb.csv")
a = movies_imdb$stars %>%
str_split(",") %>%
unlist() %>%
unique()
a=a[!is.na(a)]
a=a[str_detect(a, " ")]
actors_and_movies = data.frame(matrix(NA, nrow = 0, ncol = 3))
names(actors_and_movies) <- c("actor", "gross", "budget")
temp_actor <- movies_imdb %>%
select(stars, gross, budget)
for(i in 1 : length(a)) {
temp <- temp_actor %>%
filter(str_detect(stars, a[i]))
actors_and_movies <- rbind(actors_and_movies,
data.frame(actor = a[i],
gross = sum(temp$gross,
na.rm = T),
budget = sum(temp$budget,
na.rm = T)))
}
shiny::runApp('movies')
runApp('movies')
runApp('movies')
colnames(movies_rt)[which(names(movies_rt) == "Action & Adventure")] <- "Action"
colnames(movies_rt)[which(names(movies_rt) == "Kids & Family")] <- "Family"
colnames(movies_rt)[which(names(movies_rt) == "Musical & Performing Arts")] <- "Musical"
colnames(movies_rt)[which(names(movies_rt) == "Mystery & Suspense")] <- "Mystery"
colnames(movies_rt)[which(names(movies_rt) == "Science Fiction & Fantasy")] <- "Fantasy"
colnames(movies_rt)[which(names(movies_rt) == "Sports & Fitness")] <- "Sport"
colnames(movies_rt)[which(names(movies_rt) == "Cult Movies")] <- "Thriller"
colnames(movies_rt)[which(names(movies_rt) == "Classics")] <- "History"
colnames(movies_rt)[which(names(movies_rt) == "Classification")] <- "contentRatingLevel"
colnames(movies_rt)[which(names(movies_rt) == "Tomato_meter")] <- "rating"
colnames(movies_rt)[which(names(movies_rt) == "Directed_by")] <- "director"
colnames(movies_rt)[which(names(movies_rt) == "Cast")] <- "stars"
colnames(movies_rt)[which(names(movies_rt) == "Title")] <- "name"
colnames(movies_rt)
movies_rt = read_csv("movies_df.csv")
colnames(movies_rt)[which(names(movies_rt) == "Action & Adventure")] <- "Action"
colnames(movies_rt)[which(names(movies_rt) == "Kids & Family")] <- "Family"
colnames(movies_rt)[which(names(movies_rt) == "Musical & Performing Arts")] <- "Musical"
colnames(movies_rt)[which(names(movies_rt) == "Mystery & Suspense")] <- "Mystery"
colnames(movies_rt)[which(names(movies_rt) == "Science Fiction & Fantasy")] <- "Fantasy"
colnames(movies_rt)[which(names(movies_rt) == "Sports & Fitness")] <- "Sport"
colnames(movies_rt)[which(names(movies_rt) == "Cult Movies")] <- "Thriller"
colnames(movies_rt)[which(names(movies_rt) == "Classics")] <- "History"
colnames(movies_rt)[which(names(movies_rt) == "Classification")] <- "contentRatingLevel"
colnames(movies_rt)[which(names(movies_rt) == "Tomato_meter")] <- "rating"
colnames(movies_rt)[which(names(movies_rt) == "Directed_by")] <- "director"
colnames(movies_rt)[which(names(movies_rt) == "Cast")] <- "stars"
colnames(movies_rt)[which(names(movies_rt) == "Title")] <- "name"
movies_rt = movies_rt %>%
mutate(SciFi = Fantasy) %>%
mutate(Adventure = Action) %>%
mutate(year = str_match(name, "[0-9]{4}")) %>%
mutate(name = str_replace_all(name, "[0-9]{4}", "")) %>%
mutate(name = str_replace_all(name, "\\(\\)", "")) %>%
mutate(contentRatingLevel = str_replace_all(contentRatingLevel, "\\(.*\\)", "")) %>%
mutate(contentRatingLevel = str_replace_all(contentRatingLevel, " $", "")) %>%
mutate(genres = "default")
#collapse genre boolean column into single column containing a single vector
movies_rt = mutate(movies_rt, genres = ifelse(Action == TRUE, str_c(genres, ",Action"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Adeventure == TRUE, str_c(genres, ",Adventure"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Animation == TRUE, str_c(genres, ",Animation"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(History == TRUE, str_c(genres, ",History"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Comedy == TRUE, str_c(genres, ",Comedy"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Documentary == TRUE, str_c(genres, ",Documentary"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Family == TRUE, str_c(genres, ",Family"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Horror == TRUE, str_c(genres, ",Horror"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Musical == TRUE, str_c(genres, ",Musical"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Romance == TRUE, str_c(genres, ",Romance"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Sport == TRUE, str_c(genres, ",Sport"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Thriller == TRUE, str_c(genres, ",Thriller"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Drama == TRUE, str_c(genres, ",Drama"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Horror == TRUE, str_c(genres, ",Horror"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Mystery == TRUE, str_c(genres, ",Mystery"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Fantasy == TRUE, str_c(genres, ",Fantasy"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Western == TRUE, str_c(genres, ",Western"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(SciFi == TRUE, str_c(genres, ",Sci-Fi"), genres))
movies_rt = mutate(movies_rt, genres = str_replace_all(genres, "default,", ""))
# movies_rt = mutate(movies_rt, genres = str_split(genres, ","))
write_csv(movies_rt, "movies_rotten.csv")
runApp('movies')
runApp('~/Dropbox/Stats133/group_project/finalproject-googly-eyes/movies')
runApp('~/Dropbox/Stats133/group_project/finalproject-googly-eyes/movies')
setwd("~/Dropbox/Stats133/group_project/finalproject-googly-eyes")
movies_rt = read_csv("movies_df.csv")
colnames(movies_rt)[which(names(movies_rt) == "Action & Adventure")] <- "Action"
colnames(movies_rt)[which(names(movies_rt) == "Kids & Family")] <- "Family"
colnames(movies_rt)[which(names(movies_rt) == "Musical & Performing Arts")] <- "Musical"
colnames(movies_rt)[which(names(movies_rt) == "Mystery & Suspense")] <- "Mystery"
colnames(movies_rt)[which(names(movies_rt) == "Science Fiction & Fantasy")] <- "Fantasy"
colnames(movies_rt)[which(names(movies_rt) == "Sports & Fitness")] <- "Sport"
colnames(movies_rt)[which(names(movies_rt) == "Cult Movies")] <- "Thriller"
colnames(movies_rt)[which(names(movies_rt) == "Classics")] <- "History"
colnames(movies_rt)[which(names(movies_rt) == "Classification")] <- "contentRatingLevel"
colnames(movies_rt)[which(names(movies_rt) == "Tomato_meter")] <- "rating"
colnames(movies_rt)[which(names(movies_rt) == "Directed_by")] <- "director"
colnames(movies_rt)[which(names(movies_rt) == "Cast")] <- "stars"
colnames(movies_rt)[which(names(movies_rt) == "Title")] <- "name"
movies_rt = movies_rt %>%
mutate(SciFi = Fantasy) %>%
mutate(Adventure = Action) %>%
mutate(year = str_match(name, "[0-9]{4}")) %>%
mutate(name = str_replace_all(name, "[0-9]{4}", "")) %>%
mutate(name = str_replace_all(name, "\\(\\)", "")) %>%
mutate(contentRatingLevel = str_replace_all(contentRatingLevel, "\\(.*\\)", "")) %>%
mutate(contentRatingLevel = str_replace_all(contentRatingLevel, " $", "")) %>%
mutate(genres = "default") %>%
mutate(name = str_replace_all("�", ""))
#collapse genre boolean column into single column containing a single vector
movies_rt = mutate(movies_rt, genres = ifelse(Action == TRUE, str_c(genres, ",Action"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Adeventure == TRUE, str_c(genres, ",Adventure"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Animation == TRUE, str_c(genres, ",Animation"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(History == TRUE, str_c(genres, ",History"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Comedy == TRUE, str_c(genres, ",Comedy"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Documentary == TRUE, str_c(genres, ",Documentary"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Family == TRUE, str_c(genres, ",Family"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Horror == TRUE, str_c(genres, ",Horror"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Musical == TRUE, str_c(genres, ",Musical"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Romance == TRUE, str_c(genres, ",Romance"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Sport == TRUE, str_c(genres, ",Sport"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Thriller == TRUE, str_c(genres, ",Thriller"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Drama == TRUE, str_c(genres, ",Drama"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Horror == TRUE, str_c(genres, ",Horror"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Mystery == TRUE, str_c(genres, ",Mystery"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Fantasy == TRUE, str_c(genres, ",Fantasy"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(Western == TRUE, str_c(genres, ",Western"), genres))
movies_rt = mutate(movies_rt, genres = ifelse(SciFi == TRUE, str_c(genres, ",Sci-Fi"), genres))
movies_rt = mutate(movies_rt, genres = str_replace_all(genres, "default,", ""))
# movies_rt = mutate(movies_rt, genres = str_split(genres, ","))
write_csv(movies_rt, "movies_rotten.csv")
View(movies_rt)
shiny::runApp('movies')
install.packages("rgl")
shiny::runApp('movies')
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('movies')
shiny::runApp('movies')
shiny::runApp('movies')
shiny::runApp('movies')
shiny::runApp('movies')
shiny::runApp('movies')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/Data Cleaning Script/dataCleaning.R', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/raw_data/fetch_imdb_script.R', echo=TRUE)
setwd("~/fuck/finalproject-googly-eyes/raw_data")
source('~/fuck/finalproject-googly-eyes/raw_data/fetch_imdb_script.R', echo=TRUE)
source('~/fuck/finalproject-googly-eyes/raw_data/fetch_imdb_script.R', echo=TRUE)
